#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev require_order prefix_pattern=- );
use Fcntl qw( O_WRONLY O_CREAT O_EXCL );
use POSIX 'WNOHANG';
use IO::Select;
use IO::Socket;

sub BLOCKSIZE () { 8192 }

sub BINARY_SWITCH () { 'bcDeFIiLlmOopRSWw' }
sub  UNARY_SWITCH () { '1246AaCfgKkMNnqsTtVvXxYy' }

my $listen = IO::Socket::INET->new(
	Listen    => 1,
	Proto     => 'tcp',
	LocalAddr => '127.0.0.1',
	LocalPort => 0,
	ReusePort => 1,
);

my $LOCAL_PORT  = $listen->sockport;
my $REMOTE_PORT = 12345;

my ( @ssh_argv, $did_hostname );

{
	GetOptions(
		( map {; "$_=s" => sub { push @ssh_argv, '-'.shift, @_ } } split //, BINARY_SWITCH ),
		( map {;  $_    => sub { push @ssh_argv, '-'.shift     } } split //,  UNARY_SWITCH ),
	) or exit 1;

	if ( not $did_hostname++ ) {
		push @ssh_argv, shift @ARGV;
		redo;
	}
}

if ( not @ARGV ) { # login shell requested
	push @ssh_argv, '-t';
	@ARGV = ( perl => -e => q{'m![^/]+\z! && exec { $_ } "-$&" for +(getpwnam $ENV{USER})[8]'} );
}

push @ssh_argv, -S => none => -R => "$REMOTE_PORT:localhost:$LOCAL_PORT";
unshift @ARGV, env => "SSH_LIFELINE_PORT=$REMOTE_PORT";

my $ssh_exit;

for ( fork ) {
	die "Coudldn't fork: $!\n" if not defined;
	if ( my $firstborn = $_ ) {
		$SIG{'CHLD'} = sub {
			my $child;
			do {
				$child = waitpid( -1, WNOHANG );
				$ssh_exit = $? >> 8 if $child == $firstborn;
			} while $child > 0;
		};
	}
	else {
		exec { 'ssh' } ssh => @ssh_argv, @ARGV;
	}
}

my $select = IO::Select->new( $listen );

my %buf;
my %name;
my %outfh;

sub done {
	my ( $sock ) = @_;
	$select->remove( $sock );
	$sock->close;
	delete $outfh{ $sock };
	delete $buf{ $sock };
	delete $name{ $sock };
	no warnings 'exiting';
	next SOCK;
}

until ( defined $ssh_exit ) {
	my @ready = $select->can_read; # may return () if interrupted by SIGCHLD

	SOCK: for my $sock ( @ready ) {
		if ( $sock == $listen ) {
			my $new = $listen->accept;
			$select->add( $new );
			$buf{ $new } = '';
			next;
		}

		for ( $buf{ $sock } ) {
			1 while BLOCKSIZE == ( $sock->sysread( $_, BLOCKSIZE, length ) || 0 );

			if ( !$outfh{ $sock } and s/\A([^\x{0}]+)\x{0}// ) {
				my $filename = $1;
				$filename =~ s!.*/!!;
				done $sock if not length $filename;
				substr $filename, 0, 0, '/tmp/';
				$name{ $sock } = $filename;
				sysopen $outfh{ $sock }, $filename, O_WRONLY|O_CREAT|O_EXCL
					or done $sock;
			}

			if ( my $fh = $outfh{ $sock } ) {
				print $fh $_;
				$_ = '';
			}
		}

		if ( $sock->eof ) {
			for ( fork ) { exec open => $name{ $sock } if defined and not $_ }
			done $sock;
		}
	}
}

exit $ssh_exit;
