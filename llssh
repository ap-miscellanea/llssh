#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev require_order prefix_pattern=- );
use IO::Async::Loop;
use Fcntl;

sub BINARY_SWITCH () { 'bcDeFIiLlmOopRSWw' }
sub  UNARY_SWITCH () { '1246AaCfgKkMNnqsTtVvXxYy' }

my $PORT = 12345;

my @ssh_argv;

GetOptions(
	( map {; "$_=s" => sub { push @ssh_argv, '-'.shift, @_ } } split //, BINARY_SWITCH ),
	( map {;  $_    => sub { push @ssh_argv, '-'.shift     } } split //,  UNARY_SWITCH ),
) or exit 1;

my $hostname = shift @ARGV;

if ( not @ARGV ) { # login shell requested
	push @ssh_argv, '-t';
	@ARGV = ( perl => -e => q{'m![^/]+\z! && exec { $_ } "-$&" for +(getpwnam $ENV{USER})[8]'} );
}

push @ssh_argv, -R => "$PORT:localhost:$PORT";
unshift @ARGV, env => "SSH_LIFELINE_PORT=$PORT";

my $loop = IO::Async::Loop->new;

$loop->fork(
	code    => sub { exec { 'ssh' } ssh => @ssh_argv, $hostname, @ARGV },
	on_exit => sub { $loop->stop },
);

$loop->listen(
	socktype  => 'stream',
	service   => $PORT,
	on_stream => sub {
		my ( $stream ) = @_;
		$stream->configure(
			on_read => sub {
				my ( $stream, $buf_r, $eof ) = @_;
				return 1 if not $$buf_r =~ s/\A([^\x{0}]+)\x{0}//;
				my $filename = $1;
				$filename =~ s!.*/!!;
				return 0 if not length $filename;
				substr $filename, 0, 0, '/tmp/';
				sysopen my $fh, $filename, O_WRONLY|O_CREAT|O_EXCL
					or return 0;
				return sub {
					my ( $stream, $buf_r, $eof ) = @_;
					( print $fh $$buf_r ) or return 0 if length $$buf_r;
					if ( $eof ) {
						$loop->fork( code => sub { exec open => $filename } );
						return 0;
					}
					$$buf_r = '';
					return 1;
				};
			},
		);
		$loop->add( $stream );
	},
);

$loop->run;
